イベントドリブンでもLambdaを呼べる

例1:
画像がs3にアップロードされたら処理を実行（予測など）


例2:
テーブルが変更されたら処理を実行


Lambda
・確保するメモリ量：128~10240MB

・900秒でタイムアウト＝15分以内で終了する処理を書く

・リクエスト100万回で0.20USD（東京リージョン）


API Gateway：タイムアウト29秒（最大）ふつうはこれだけ待たされたら処理終了する

・GET：Lambda側（APIの接続先）から情報を取得
→つまり、GETメソッドを呼んだらLambdaが裏で呼ばれて情報を返す

・Mock：固定の文字列（JSON）を返す（テスト用・疎通確認用）
・本番ではLambdaを使う

・テスト用、本番用のように複数のステージを作成可能
ステージの上にデプロイ

P70～
リソースの作成
メソッドを作成（メソッドタイプを選択）
統合レスポンスを編集、テンプレート文を記入（疎通テストで何を表示させるか？）

P80～
APIをデプロイ
ステージの中のURLを呼び出す（devの後ろに/sampleを記載）

メソッドリクエスト：今回はinput_textをキーに指定（引数に必須という設定）

テスト：
"queryStringParameters": {
    "foo": "bar"
  },
の部分を
"queryStringParameters": {
    "input_text": "お元気ですか？"
  },
に変更


Lambdaプロキシ統合とは？
APIとLambdaの間の変換を勝手にやってくれる
どういう形式は何も記述していない（input_textを引数としか設定していない）
要はLambdaへのデータの引き渡しが自動化してくれるのがプロキシ統合（Lambdaはよく使われるので自動化されている。ほかのサービスに渡すときは自身で設定が必要）
　> pythonで例えると、以下のevent～の型とか指定する部分を自動でやってくれる
　　input_text = event['queryStringParameters']['input_text']



NoSQLとは？
Keyに対してValueがある（シンプルな構造）
大規模なデータでも性能が劣化しない
RDB系（RDS、Amazon Auroraなど）は層がかさばって性能が劣化
GETとPUTのシンプルな世界なので、サーバーレスでよく使われる
NoSQLのマネージドサービスがDynamoDB

例：車両のデータを時系列で送信して管理するなど：Timestreame

フルマネージドとマネージドの違い：変更時のダウンタイムも考えなくていい

RDB：1つのテーブルに対して1つのキー
NoSQL：セカンダリーインデックスでキー値を入れ替えて検索できる

DynamoDB
・他のリージョン（3か所のリージョン）にコピー（S3のように）するので高可用性がある

なぜサーバーレスでRDBを使えないか？
・P118
　> API GWやLambdaは多数接続されてもAPIの個数分Lambdaも作成してあるので、大丈夫だが、DB側は一度に多数の接続が要求されるのでパンクしてしまう
　> DBサイドから見たコネクションに問題がある
　> RDSプロキシを使用？
　> DBを分散型にする＝DynamoDB


どんなにいいものでもセキュリティがだめだと評価は0






